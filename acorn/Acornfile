labels: {
    application: "votingapp"
}

args: {
    build: false
    
    replicas: 1

    // Use hosted Postgres database
    hostedPostgres: false

    // Use hosted Redis database
    hostedRedis: false
}

if args.hostedRedis || args.build {
  services: "exo-redis": {
      image: "docker.io/lucj/acorn-exo-dbaas-service"
      serviceArgs: {
        name: "redis"
      }
  }
}

if args.hostedPostgres || args.build {
  services: "exo-pg": {
      image: "docker.io/lucj/acorn-exo-dbaas-service"
      serviceArgs: {
        type: "pg"
        name: "pg"
      }
  }
}

containers: {
  
  voteui: {
    labels: {
      component: "voteui"
    }
    if args.dev {
      dirs: "/usr/share/nginx/html": "./vote-ui"
    }
    build: {
      context: "./vote-ui"
    }
    ports: publish : "80/http"
    scale: args.replicas
    memory: 32Mi
  }

  vote: {
    labels: {
      component: "vote"
    }
    build: {
      target: std.ifelse(args.dev, "dev", "production")
      context: "./vote"
    }
    if args.dev {
      dirs: {
          "/app": "./vote"
      }
    }
    if args.hostedRedis {
      env: {
        REDIS_URL: "@{services.exo-redis.data.proto}://@{services.exo-redis.secrets.db-creds.username}:@{services.exo-redis.secrets.db-creds.password}@@{services.exo-redis.address}:@{services.exo-redis.data.port}"
      }
    }
    ports: "5000/http"
    memory: 128Mi
  }

  if !args.hostedRedis || args.build {
    redis: {
      labels: {
        component: "redis"
      }
      image: "redis:7.0.11-alpine3.18"
      ports: "6379/tcp"
      dirs: {
        if !args.dev {
          "/data": "volume://redis"
        }
      }
      memory: 32Mi
    }
  }

  worker: {
    labels: {
      component: "worker"
    }
    build: "./worker/go"
    env: {
      if args.hostedRedis {
        REDIS_URL: "@{services.exo-redis.data.proto}://@{services.exo-redis.secrets.db-creds.username}:@{services.exo-redis.secrets.db-creds.password}@@{services.exo-redis.address}:@{services.exo-redis.data.port}"
      }
      if args.hostedPostgres {
        POSTGRES_URL: "@{services.exo-pg.data.proto}://@{services.exo-pg.secrets.db-creds.username}:@{services.exo-pg.secrets.db-creds.password}@@{services.exo-pg.address}:@{services.exo-pg.data.port}@{services.exo-pg.data.opts}"
      }
      if !args.hostedPostgres {
        "POSTGRES_USER": "secret://db-creds/username"
        "POSTGRES_PASSWORD": "secret://db-creds/password"
      }
    }
    memory: 32Mi
  }

  if !args.hostedPostgres || args.build {
    db: {
      labels: {
        component: "db"
      }
      image: "postgres:15.3-alpine3.18"
      ports: "5432/tcp"
      env: {
        "POSTGRES_USER": "secret://db-creds/username"
        "POSTGRES_PASSWORD": "secret://db-creds/password"
      }
      dirs: {
        if !args.dev {
          "/var/lib/postgresql/data": "volume://db"
        }
      }
      memory: 128Mi
    }
  }

  result: {
    labels: {
      component: "result"
    }
    build: {
      target: std.ifelse(args.dev, "dev", "production")
      context: "./result"
    }
    if args.dev {
      dirs: "/app": "./result"
    }  
    ports: "5000/http"
    env: {
      if args.hostedPostgres {
        POSTGRES_URL: "@{services.exo-pg.data.proto}://@{services.exo-pg.secrets.db-creds.username}:@{services.exo-pg.secrets.db-creds.password}@@{services.exo-pg.address}:@{services.exo-pg.data.port}@{services.exo-pg.data.opts}"
      }
      if !args.hostedPostgres {
        "POSTGRES_USER": "secret://db-creds/username"
        "POSTGRES_PASSWORD": "secret://db-creds/password"
      }
    }
   memory: 128Mi
  }

  resultui: {
    labels: {
      component: "resultui"
    }
    build: {
      target: std.ifelse(args.dev, "dev", "production")
      context: "./result-ui"
    }
    if args.dev {
      dirs:  "/app/src": "./result-ui/src"
    } 
    ports: publish : "80/http"
    if ! args.dev {
      memory: 32Mi
    }
  }
}

if !args.hostedPostgres {
  secrets: {
      "db-creds": {
          type: "basic"
          data: {
              username: ""
              password: ""
          }
      }
  }
}

volumes: {
  if !args.dev && !args.hostedPostgres {
    "db": {
        size: "100M"
    }
  }
  if !args.dev && !args.hostedRedis {
    "redis": {
        size: "100M"
    }
  }
}

if args.dev {
  jobs: {
      "seed": {
        image: "registry.gitlab.com/voting-application/tools:seed"
      }
  }
}